
caching.active=true

# material values from CPW

# middle game material values:
matPawnMG=100
matKnightMG=325
matBishopMG=335
matRookMG=500
matQueenMG=975

# end game material values:
matPawnEG=100
matKnightEG=325
matBishopEG=335
matRookEG=500
matQueenEG=975



# simple mobility analogue as in CPW where a medium mobility is 0, a "bad" mobility is negative
# the values are an int array indexed by the mobility of a figure.
# this way we can tune and adjust the values
#knightMobMG=4 * (mob-4)
knightMobMG=-31, -16, -7, -4, 1, 6, 10, 14, 29
#knightMobEG=4 * (mob-4)
knightMobEG=-92, -35, -21, -9, -4, 0, 0, 0, -9
#bishopMobMG=3 * (mob-7)
bishopMobMG=-29, -16, -4, 1, 5, 10, 13, 16, 16, 17, 24, 41, 8, 66, 0
#bishopMobEG=3 * (mob-7)
bishopMobEG=-59, -40, -29, -20, -10, -7, -2, -1, 1, 0, -4, -6, 7, -10, 0
#rookMobMG=2 * (mob-7)
rookMobMG=-22, -15, -13, -10, -9, -2, 0, 5, 8, 11, 18, 22, 31, 30, 33
#rookMobEG=4 * (mob-7)
rookMobEG=-55, -30, -11, -7, 2, 5, 11, 11, 15, 15, 17, 18, 17, 22, 22
#queenMobMG=1 * (mob-14)
queenMobMG=-28, -34, -26, -24, -15, -10, -10, -8, -5, 0, 0, 3, 5, 6, 8, 6, 18, 23, 36, 38, 56, 60, 52, 110, 84, 118, 70, 50, 0
#queenMobEG=2 * (mob-14)
queenMobEG=-55, -9, -82, -57, -84, -52, -42, -17, -7, -6, 15, 20, 28, 39, 47, 53, 53, 52, 50, 57, 52, 51, 46, 37, 30, 20, 31, 30, 0
# we do not measure king mobility (seems pretty useless, there should be other special king evaluations)
kingMobMG=0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
kingMobEG=0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

# king attack of fields around the enemy king
#knightKingAttack=2*att
knightKingAttack=0, 6, 8, 14, 0, 0, 0, 0, 0, 0, 0, 0
#bishopKingAttack=2*att
bishopKingAttack=0, 3, 8, 12, 12, 0, 0, 0, 0, 0, 0, 0
#rookKingAttack=3*att
rookKingAttack=0, 3, 6, 12, 18, 20, 0, 0, 0, 0, 0, 0
#queenKingAttack=4*att
queenKingAttack=0, 3, 5, 10, 12, 16, 18, 17, 50, 0, 0, 0
#kingKingAttack=1*att
kingKingAttack=0, 0, 3, 0, 0, 8, 0, 0, 0, 0, 0, 0


# king tropism (median manhattan distance of figure to king):
knightTropismMG= 3 * tropism
knightTropismEG= 3 * tropism

bishopTropismMG= 2 * tropism
bishopTropismEG= 1 * tropism

rookTropismMG= 2 * tropism
rookTropismEG= 1 * tropism

queenTropismMG= 2 * tropism
queenTropismEG= 4 * tropism

kingTropismMG= 0 * tropism
kingTropismEG= 4 * tropism

# pawn evaluation
# pawn shield
pawnShield2=24
pawnShield3=18

doublePawnPenalty=10
attackedPawnPenalty=23
isolatedPawnPenalty=8
backwardedPawnPenalty=7

#**************************************************************************
#  Low material correction - guarding against an illusory material advan- *
#  tage. Full blown program should have more such rules, but the current  *
#  set ought to be useful enough. Please note that our code  assumes      *
#  different material values for bishop and  knight.                      *
#                                                                         *
#  - a single minor piece cannot win                                      *
#  - two knights cannot checkmate bare king                               *
#  - bare rook vs minor piece is drawish                                  *
#  - rook and minor vs rook is drawish                                    *
#**************************************************************************

materialRule.rookVsBishopIsDrawish=R vs B* -> Reduce half
materialRule.rookVsKnightIsDrawish=R vs N* -> Reduce half
materialRule.rookAndBishopVsRookIsDrawish=RB vs R* -> Reduce half
materialRule.rookAndKnightVsRookIsDrawish=RN vs R* -> Reduce half
materialRule.bareBishopCanNotWin=B vs X -> Reduce all
materialRule.bareKnightCanNotWin=N vs X -> Reduce all
## not sure if this rule makes sense...
materialRule.twoKnightsCannotWin=NN vs X -> Reduce all


# adjustments

#tempo=10
tempo=1
bishopPair=44
knightPair=-6
rookPair=14

# mobility bonus for rooks on open or half open files:
rookOpen=20
rookHalf=7

# early qeen penality per minor undeveloped figure (bishops and knights)
earlyQueenPenalty=0

# blockages penalties:
kingBlocksRookPenalty=0
blockCentralPawnPenalty=0
bishopTrappedA7Penalty=0
bishopTrappedA6Penalty=0
knightTrappedA8Penalty=0
knightTrappedA7Penalty=0
c3KnightPenalty=0

# minor bonuses
returningBishop=0


endgameEvaluations.active=true

threads.active=false

threads.ThreatByMinorMg=0, 13, 19, 33, 24, 87
threads.ThreatByMinorEg=3, 26, 15, 1, 0, 22

threads.ThreatByRookMg=0, 8, 15, 6, 49, 157
threads.ThreatByRookEg=5, 7, 12, 12, 0, 15

threads.ThreatByKingMg=0
threads.ThreatByKingEg=26

threads.HangingMg=0
threads.HangingEg=1

threads.WeakQueenProtectionMg=1
threads.WeakQueenProtectionEg=5

threads.RestrictedPieceMg=4
threads.RestrictedPieceEg=2

threads.ThreatByPawnPushMg=19
threads.ThreatByPawnPushEg=10

threads.ThreatBySafePawnMg=46
threads.ThreatBySafePawnEg=19

threads.SliderOnQueenMg=13
threads.SliderOnQueenEg=0

threads.KnightOnQueenMg=3
threads.KnightOnQueenEg=7

passedPawn.multiplier.blocked=0.60000134
passedPawn.multiplier.noEnemyAttacksInFront=2.1999946
passedPawn.multiplier.nextSquareAttacked=1.4000001
passedPawn.multiplier.nextSquareDefended=1.1999998

passedPawn.multiplier.enemyKingInFront=0.20000005
passedPawn.multiplier.attacked=0.40000013
passedPawn.multiplier.defendedByRookFromBehind=1.8999999
passedPawn.multiplier.attackedByRookFromBehind=0.20000005

passedPawn.kingMultiplicators=0.99999994, 3.0, 2.1999948, 1.9, 1.7, 1.5, 1.0999999, 1.4000001
passedPawn.passedScoreEg=0, 37, 25, 11, 7, 2, 2
