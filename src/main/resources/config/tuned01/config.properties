
caching.active=true

# material values from CPW

# middle game material values:
matPawnMG=100
matKnightMG=325
matBishopMG=335
matRookMG=500
matQueenMG=975

# end game material values:
matPawnEG=100
matKnightEG=325
matBishopEG=335
matRookEG=500
matQueenEG=975



# simple mobility analogue as in CPW where a medium mobility is 0, a "bad" mobility is negative
# the values are an int array indexed by the mobility of a figure.
# this way we can tune and adjust the values
#knightMobMG=4 * (mob-4)
knightMobMG=-21, -9, -1, -1, 4, 8, 12, 16, 31
#knightMobEG=4 * (mob-4)
knightMobEG=-69, -22, -7, 0, 5, 10, 13, 15, 7
#bishopMobMG=3 * (mob-7)
bishopMobMG=-27, -21, -11, -7, -4, 0, 3, 6, 4, 7, 10, 39, 14, 52, 21
#bishopMobEG=3 * (mob-7)
bishopMobEG=-54, -38, -27, -17, -4, 0, 4, 5, 9, 8, 7, 4, 22, 4, 21
#rookMobMG=2 * (mob-7)
rookMobMG=-21, -12, -10, -8, -6, 1, 3, 8, 15, 17, 23, 31, 31, 31, 27
#rookMobEG=4 * (mob-7)
rookMobEG=-48, -26, -12, -6, 0, 5, 12, 10, 14, 18, 20, 21, 23, 24, 24
#queenMobMG=1 * (mob-14)
queenMobMG=-19, -24, -19, -18, -10, -4, -7, -7, -6, -2, -4, -3, -2, -1, -1, -9, 7, 7, 16, 17, 29, 37, 36, 81, 56, 52, 31, 16, 14
#queenMobEG=2 * (mob-14)
queenMobEG=-2, -13, -74, -60, -80, -70, -40, -20, -6, -13, 3, 15, 19, 27, 33, 43, 40, 38, 36, 48, 40, 38, 26, 24, 10, 22, 27, 12, 28


# we do not measure king mobility (seems pretty useless, there should be other special king evaluations)
kingMobMG=0*(mob+0)
kingMobEG=0*(mob+0)

# king attack of fields around the enemy king
knightKingAttack=2*att
bishopKingAttack=2*att
rookKingAttack=3*att
queenKingAttack=4*att
kingKingAttack=1*att


# king tropism (median manhattan distance of figure to king):
knightTropismMG= 3 * tropism
knightTropismEG= 3 * tropism

bishopTropismMG= 2 * tropism
bishopTropismEG= 1 * tropism

rookTropismMG= 2 * tropism
rookTropismEG= 1 * tropism

queenTropismMG= 2 * tropism
queenTropismEG= 4 * tropism

kingTropismMG= 0 * tropism
kingTropismEG= 4 * tropism

# pawn evaluation
# pawn shield
pawnShield2=10
pawnShield3=5

doublePawnPenalty=20
attackedPawnPenalty=4


#**************************************************************************
#  Low material correction - guarding against an illusory material advan- *
#  tage. Full blown program should have more such rules, but the current  *
#  set ought to be useful enough. Please note that our code  assumes      *
#  different material values for bishop and  knight.                      *
#                                                                         *
#  - a single minor piece cannot win                                      *
#  - two knights cannot checkmate bare king                               *
#  - bare rook vs minor piece is drawish                                  *
#  - rook and minor vs rook is drawish                                    *
#**************************************************************************

materialRule.rookVsBishopIsDrawish=R vs B* -> Reduce half
materialRule.rookVsKnightIsDrawish=R vs N* -> Reduce half
materialRule.rookAndBishopVsRookIsDrawish=RB vs R* -> Reduce half
materialRule.rookAndKnightVsRookIsDrawish=RN vs R* -> Reduce half
materialRule.bareBishopCanNotWin=B vs X -> Reduce all
materialRule.bareKnightCanNotWin=N vs X -> Reduce all
## not sure if this rule makes sense...
materialRule.twoKnightsCannotWin=NN vs X -> Reduce all


# adjustments

#tempo=10
tempo=1
bishopPair=44
knightPair=-6
rookPair=10

# mobility bonus for rooks on open or half open files:
rookOpen=10
rookHalf=5

# early qeen penality per minor undeveloped figure (bishops and knights)
earlyQueenPenalty=2

# blockages penalties:
kingBlocksRookPenalty=0
blockCentralPawnPenalty=0
bishopTrappedA7Penalty=0
bishopTrappedA6Penalty=0
knightTrappedA8Penalty=0
knightTrappedA7Penalty=0
c3KnightPenalty=0

# minor bonuses
returningBishop=0


endgameEvaluations.active=true
